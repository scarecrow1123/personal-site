<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://scarecrow1123.github.io/personal-site/feed.xml" rel="self" type="application/atom+xml" /><link href="https://scarecrow1123.github.io/personal-site/" rel="alternate" type="text/html" /><updated>2020-09-14T12:54:32-05:00</updated><id>https://scarecrow1123.github.io/personal-site/feed.xml</id><title type="html">Ananda Seelan</title><subtitle>Stuff</subtitle><entry><title type="html">OMS CS6601 Artificial Intelligence Spring ‘20</title><link href="https://scarecrow1123.github.io/personal-site/gatech-omscs/2020/05/10/ai.html" rel="alternate" type="text/html" title="OMS CS6601 Artificial Intelligence Spring ‘20" /><published>2020-05-10T00:00:00-05:00</published><updated>2020-05-10T00:00:00-05:00</updated><id>https://scarecrow1123.github.io/personal-site/gatech-omscs/2020/05/10/ai</id><content type="html" xml:base="https://scarecrow1123.github.io/personal-site/gatech-omscs/2020/05/10/ai.html">&lt;p&gt;&lt;strong&gt;CS 6601 Artificial Intelligence&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Instructor: Thad Starner
Course Page: &lt;a href=&quot;https://www.omscs.gatech.edu/cs-6601-artificial-intelligence&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is my second year in the OMS program and CS6601 proved to be way more serious than the &lt;a href=&quot;https://github.com/scarecrow1123/blog/issues/8&quot;&gt;previous ones&lt;/a&gt; that I had taken before. The course covered a larger number of topics than the previous ones, the projects and content being more difficult. The students definitely aged a bit at the end of the term and a student even claimed that he started having delusional Piazza/Canvas notifications about the grades in his dreams. On the other hand, finishing this course also was more satisfactory given the number of hours we spent each week.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;About the course&lt;/strong&gt;
The course is a survey of AI algorithms/paradigms and closely follows &lt;a href=&quot;https://en.wikipedia.org/wiki/Artificial_Intelligence:_A_Modern_Approach&quot;&gt;Artificial Intelligence: A Modern Approach, by Stuart Russel and Peter Norvig&lt;/a&gt; book. It starts with discussing the technique involved in developing game AI called Adversarial Search which includes algorithms such as Minimax, Expectimax, Iterative Deepening &amp;amp; Alpha-beta pruning. This topic gets a companion project where we had to implement these techniques to develop an agent that can play a board game called Isolation. Following this, a survey of various Search algorithms used for Planning such as Breadth First Search, Depth First Search, A*, etc. were introduced. The second project involved implementing these algorithms along with extending these techniques to cases such as bi-directional and tri-directional searches for effective planning.&lt;/p&gt;

&lt;p&gt;Next were lessons on Constraint Satisfaction Problems(CSPs) and Simulated Annealing techniques. This was followed by lectures as well as a project on Bayes Networks. This introduced techniques such as d-separation, variable elimination, etc. for probabilistic inference. A very brief introduction to different Machine Learning algorithms was given and a subsequent project to implement a few variants of Decision Trees. Another project related to Machine Learning was to implement Image Segmentation using Gaussian Mixture Models. We were also introduced to Hidden Markov Models and had to implement a simple sign language recognition model as a project. At the end, there was a brief discussion about Propsitional &amp;amp; First-order Logic, followed by an introduction to Markov Decision Processes.&lt;/p&gt;

&lt;p&gt;There were six projects in total from which one project with the least grade was dropped for grades. The projects summed up to 60% of the total grade. Most of the students found the first two projects very hard and one had to spend 20-30 hours on the projects in general. Two take home, open book exams fill up the rest of the grade distribution. The exams were long 50+ page booklets and involved coding up and solving problems from the above topics.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lecture Content&lt;/strong&gt;
The lectures tend to overlook at places without going deeper into the material. Apart from the Russel &amp;amp; Norvig book, I found lectures from &lt;a href=&quot;https://www.youtube.com/playlist?list=PLUl4u3cNGP63gFHB6xb-kVBiQHYe_4hSi&quot;&gt;MIT AI - Patrick Winston&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/playlist?list=PLoROMvodv4rO1NB9TD4iUZ3qghGEGtqNX&quot;&gt;Stanford AI - Liang &amp;amp; Sadigh&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/playlist?list=PL7k0r4t5c108AZRwfW-FhnkZ0sCKBChLH&quot;&gt;UC Berkeley AI - Peter Abeel&lt;/a&gt; and other resources very helpful to fill in the gaps. Few videos from the channel &lt;a href=&quot;https://www.youtube.com/user/mathematicalmonk&quot;&gt;mathematicalmonk&lt;/a&gt; also helped for certain topics.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;
This class was a hard, but satisfactory course. As with any other course, starting the projects as early as possible is the key. Starting early in this course is even more crucial given the insanely long number of hours each project requires, especially if one works full time.&lt;/p&gt;</content><author><name></name></author><category term="gatech-omscs" /><summary type="html">CS 6601 Artificial Intelligence</summary></entry><entry><title type="html">Audio pre-processing for Machine Learning: Getting things right</title><link href="https://scarecrow1123.github.io/personal-site/python/deep-learning/software/2020/01/01/audio.html" rel="alternate" type="text/html" title="Audio pre-processing for Machine Learning: Getting things right" /><published>2020-01-01T00:00:00-06:00</published><updated>2020-01-01T00:00:00-06:00</updated><id>https://scarecrow1123.github.io/personal-site/python/deep-learning/software/2020/01/01/audio</id><content type="html" xml:base="https://scarecrow1123.github.io/personal-site/python/deep-learning/software/2020/01/01/audio.html">&lt;p&gt;&lt;strong&gt;Audio pre-processing for Machine Learning: Getting things right&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For any machine learning experiment, careful handling of input data in terms of cleaning, encoding/decoding, featurizing are paramount. When it comes to applying machine learning for audio, it gets even trickier when compared with text/image, since dealing with audio involves many tiny details that can be overlooked. Any sort of inconsistency in the pre-processing pipeline could be a potential disaster in terms of the final accuracy of the overall system. We’ll look into a few basic things that need to be set right when writing an audio pre-processing pipeline.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you are not familiar with how audio input is fed to a machine learning model, I highly recommend reading these two articles first:  &lt;a href=&quot;https://medium.com/@ageitgey/machine-learning-is-fun-part-6-how-to-do-speech-recognition-with-deep-learning-28293c162f7a&quot;&gt;How to do Speech Recognition with Deep Learning&lt;/a&gt;, &lt;a href=&quot;https://haythamfayek.com/2016/04/21/speech-processing-for-machine-learning.html&quot;&gt;Speech Processing for Machine Learning - Filter banks, etc.&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&quot;fixing-on-a-data-format&quot;&gt;Fixing on a data format&lt;/h4&gt;
&lt;p&gt;First step to get the pipeline right is to fix on a specific data format that the system would require. This would ensure a consistent interface that the dataset reader can rely upon. The usual practice is to use WAV which is a lossless format(FLAC is also another popular choice). Since WAV is an uncompressed format, it tends to be better when compared to lossy formats such as MP3, etc.&lt;/p&gt;

&lt;h4 id=&quot;do-not-vary-the-sample-rate&quot;&gt;Do not vary the sample rate&lt;/h4&gt;
&lt;p&gt;WAV stores audio signals as a series of numbers also called the &lt;strong&gt;PCM (Pulse Code Modulation)&lt;/strong&gt; data. PCM is a way to convert analog audio to digital data. So essentially if you are loading an audio file into a numpy array, it is the underlying PCM data that is loaded. Each number in the sequence is called a &lt;strong&gt;sample&lt;/strong&gt;, that represents the amplitude of the signal at an approximate point in time. It is called a sample since the PCM method approximates the amplitude value by sampling the original audio signal for a fixed number of times every second. The number of samples taken for every second is the &lt;strong&gt;sampling rate&lt;/strong&gt; of the signal. This is an important factor that needs to be uniform in the audio pipeline. If this varies in different parts of a system, things can get miserable! Many machine learning systems for audio applications such as speech recognition, wake-word detection, etc. can work well with &lt;strong&gt;16k Hz&lt;/strong&gt; audio(16000 samples for every second of the original audio). So for example, a numpy array for a 5 second audio with 16k Hz sample rate would have the shape &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(80000,)&lt;/code&gt; ( 5 * 16000 = 80000).&lt;/p&gt;

&lt;p&gt;Popular audio libraries such as &lt;a href=&quot;https://pysoundfile.readthedocs.io/en/0.9.0/&quot;&gt;PySoundFile&lt;/a&gt;, &lt;a href=&quot;https://github.com/audeering/audiofile&quot;&gt;audiofile&lt;/a&gt;, &lt;a href=&quot;https://librosa.github.io/librosa/index.html&quot;&gt;librosa&lt;/a&gt;, etc. in Python provide operations for loading audio to numpy array and return the sample rate of the signal. The libraries use the header information in WAV files to figure out the sample rate.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Using soundfile to load audio and know its sample rate
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;soundfile&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sf&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;audio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample_rate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sample.wav&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;bit-depth&quot;&gt;Bit depth&lt;/h4&gt;
&lt;p&gt;This is a crucial property that needs to be handled correctly, especially in places where the data is loaded to arrays/tensors. &lt;strong&gt;Bit depth&lt;/strong&gt; represents the number of bits required to represent each sample in the PCM audio data. In practice, &lt;strong&gt;16-bit&lt;/strong&gt; signed integers can be used to store training data. During training, these 16-bit data can be loaded to 32-bit float tensors/arrays and can be fed to neural nets. Things can go wrong here say when a 24-bit audio file is loaded into a 16-bit array. Let’s take Python stdlib’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wave&lt;/code&gt; module for example, which returns a byte array from an audio file:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;wave&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;w&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wave&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sample_16b.wav&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;rb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;n_samples&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getnframes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;audio_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readnframes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_samples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The byte array is converted into a np array using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;np.frombuffer&lt;/code&gt; and specifying the appropriate type of the data stored, 16-bit int in this case. Things will go wrong when it is loaded into a wrong container say &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;np.int8&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# correct type
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;audio_array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frombuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;audio_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# incorrect
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;audio_array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frombuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;audio_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hence deciding on a standard bit depth that the system will always look for, will help eliminate overflows because of incorrect typecasting.&lt;/p&gt;

&lt;h4 id=&quot;byte-order&quot;&gt;Byte order&lt;/h4&gt;
&lt;p&gt;It is also recommended to not to take the byte order for granted when reading/writing audio data. Even though the underlying codec may take into account the system’s byte order, for the paranoid ones, it is better to get fixed on one standard order, say &lt;strong&gt;little endian&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;channels&quot;&gt;Channels&lt;/h4&gt;
&lt;p&gt;Number of channels can depend on the actual application for which the pre-processing step is done. For speech recognition let’s say, an input to a neural net is typically a single channel. In case of a stereo input, each channel can form distinct inputs to the neural net. Or the channels could be merged together to form a mono audio. However, this is an application specific choice.&lt;/p&gt;

&lt;h4 id=&quot;a-standard-way-to-loadconvert-input-audio&quot;&gt;A standard way to load/convert input audio&lt;/h4&gt;
&lt;p&gt;To make sure nothing goes wrong in your audio pre-processing pipeline, it would be the safest to assume none of your inputs is in the right format and always go for a standard format conversion routine. Below would be a set of useful ffmpeg options using &lt;a href=&quot;https://github.com/kkroening/ffmpeg-python&quot;&gt;ffmpeg-python&lt;/a&gt; to standardize the incoming input:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ffmpeg&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ffmpeg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sample.wav&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# set the output sample rate is 16000
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ffmpeg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;aresample&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;osr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# set num channels = 1, bit depth to 16-bit int(s16), byte order to little endian(le) 
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ffmpeg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;pipe:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ac&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acodec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pcm_s16le&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;s16le&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ffmpeg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;quiet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# load it with proper data type (int16)
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;audio_array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frombuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dtype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;audio_array&lt;/code&gt; is raw PCM data and cannot be directly written into a WAV file. It is safe to use the IO mechanisms that the audio libraries provide to write the raw data into a WAV file. This will make sure appropriate headers are in place in the WAV file.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;soundfile&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sf&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sample_out.wav&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audio_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;samplerate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subtype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PCM_16&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endian&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;LITTLE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The raw array data however is the starting point for further pre-processing which depend on the downstream experiment/application. They can be converted to signal processing features such as spectrogram, MFCC, etc. which are supported by libraries such as &lt;a href=&quot;https://librosa.github.io/librosa/index.html&quot;&gt;librosa&lt;/a&gt;, &lt;a href=&quot;https://pytorch.org/audio/&quot;&gt;torchaudio&lt;/a&gt;, etc.&lt;/p&gt;</content><author><name></name></author><category term="python" /><category term="deep-learning" /><category term="software" /><summary type="html">Audio pre-processing for Machine Learning: Getting things right</summary></entry><entry><title type="html">OMS CS7646 Machine Learning for Trading- Fall ‘19</title><link href="https://scarecrow1123.github.io/personal-site/gatech-omscs/2019/12/31/ml4t.html" rel="alternate" type="text/html" title="OMS CS7646 Machine Learning for Trading- Fall ‘19" /><published>2019-12-31T00:00:00-06:00</published><updated>2019-12-31T00:00:00-06:00</updated><id>https://scarecrow1123.github.io/personal-site/gatech-omscs/2019/12/31/ml4t</id><content type="html" xml:base="https://scarecrow1123.github.io/personal-site/gatech-omscs/2019/12/31/ml4t.html">&lt;p&gt;&lt;strong&gt;CS 7646 Machine Learning For trading&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Instructor(s): David Byrd / David Joyner / Tucker Balch
Course Page: &lt;a href=&quot;http://quantsoftware.gatech.edu/CS7646_Fall_2019&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This was my third OMS course after &lt;a href=&quot;https://github.com/scarecrow1123/blog/issues/6&quot;&gt;Robotics - AI Techniques&lt;/a&gt; and &lt;a href=&quot;https://github.com/scarecrow1123/blog/issues/3&quot;&gt;KBAI&lt;/a&gt;. I’ve only been taking one course per term and this marks the completion of my one year into OMS, starting from Spring ‘19.&lt;/p&gt;

&lt;h4 id=&quot;about-the-course&quot;&gt;About the Course&lt;/h4&gt;
&lt;p&gt;This is a gentle introduction to few fundamental concepts of numpy/pandas, machine learning and trading. The only prerequisite that this course assumes is some familiarity in programming with Python. Hence this could be an apt starter course for someone from a non CS background too.&lt;/p&gt;

&lt;p&gt;The first part of the course deals with introducing numpy, pandas, i.e., dealing with multi dimensional data in general. Historical stock data are provided in CSV files. Basic manipulation and plotting these data with matplotlib is also introduced.&lt;/p&gt;

&lt;p&gt;Second part introduces concepts of trading, technical analysis and a some insights of how hedge funds function. Technical analysis chapter deals with details on how simple heuristics called technical indicators are used by traders to understand various characteristics of a stock. These indicators form the feature set with which machine learning algorithms are trained to do automated trading.&lt;/p&gt;

&lt;p&gt;Third part discusses basic machine learning algorithms such as linear regression, decision trees and also Q-Learning which is a reinforcement learning technique.&lt;/p&gt;

&lt;h4 id=&quot;projects&quot;&gt;Projects&lt;/h4&gt;
&lt;p&gt;There are totally 8 projects involved in the course work. Few of the major projects are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Decision Trees: In this project, we built a regression model with decision trees from scratch. A classic decision tree and a random forest with boosting is built to predict stock returns.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Market Simulation: The objective here is to understand how a stock market works by writing a toy market simulator. It keeps track of orders/holdings and compute the final statistics. The code written for this also would find place in the subsequent projects.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Manual Strategy: Here, the intention is to implement few of the technical indicators of choice. Along with these, we are to write a rule based system to incorporate the chosen indicators and do trading on the simulator that is already written.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Q-Learner: The objective here is to implement a generic Q-Learner, but for robot navigation primarily to get familiarized with the algorithm.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The final project is to use either the Decision Tree or the Q-Learner and replace the rule-based trading with the automated one and report findings.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;class-and-grading&quot;&gt;Class and Grading&lt;/h4&gt;
&lt;p&gt;This term, the on-site and online classes were run together for the first time as an experiment. Only the exams and lecture delivery varied. The class was pretty much run by the head TA for the entire term. Grades were not curved with two exams amounting to 25% and projects to 73% of the total grades. There were minor points for an extra credit project and participation.&lt;/p&gt;

&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;The technical analysis part was helpful for me personally. Since I had prior experience with Python and machine learning to an extent, the material wasn’t difficult to follow. I wish the course content had a bit more depth at times and the material felt like undergrad level in a few places.&lt;/p&gt;</content><author><name></name></author><category term="gatech-omscs" /><summary type="html">CS 7646 Machine Learning For trading</summary></entry><entry><title type="html">How to handle multi process logging in Python?</title><link href="https://scarecrow1123.github.io/personal-site/python/software/2019/09/26/multi-log.html" rel="alternate" type="text/html" title="How to handle multi process logging in Python?" /><published>2019-09-26T00:00:00-05:00</published><updated>2019-09-26T00:00:00-05:00</updated><id>https://scarecrow1123.github.io/personal-site/python/software/2019/09/26/multi-log</id><content type="html" xml:base="https://scarecrow1123.github.io/personal-site/python/software/2019/09/26/multi-log.html">&lt;p&gt;Python’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;logging&lt;/code&gt; module provides a list of super &lt;a href=&quot;https://docs.python.org/3/howto/logging.html#useful-handlers&quot;&gt;useful handlers&lt;/a&gt; to handle/redirect log messages to required target destinations. For instance &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FileHandler&lt;/code&gt; sends the messages to a file, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DatagramHandler&lt;/code&gt; sends to UDP ports, etc. In a multi process setup however, using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FileHandler&lt;/code&gt; to redirect logs to the same file from different processes would only corrupt the log file. Explicitly acquiring locks to the same file is a bad thing to do.&lt;/p&gt;

&lt;p&gt;An out-of-the-box way is to use this package called &lt;a href=&quot;https://pypi.org/project/multiprocessing-logging/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;multiprocess-logging&lt;/code&gt;&lt;/a&gt;. This pip package implements a custom log handler. The handler receives all the messages, puts them in an internal &lt;a href=&quot;https://docs.python.org/3/library/multiprocessing.html?highlight=multiprocessing#multiprocessing.Queue&quot;&gt;queue&lt;/a&gt; and emits by dequeuing messages from the queue.&lt;/p&gt;

&lt;p&gt;Aggregating the log messages to a queue is the only way to handle this scenario. But there is a graceful alternative way to achieve this. Python’s logging module provides built in mechanisms to handle queue based logging with &lt;a href=&quot;https://docs.python.org/3/library/logging.handlers.html#logging.handlers.QueueHandler&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;QueueHandler&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3/library/logging.handlers.html#queuelistener&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;QueueListener&lt;/code&gt;&lt;/a&gt; classes.&lt;/p&gt;

&lt;p&gt;Similar to how &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FileHandler&lt;/code&gt; provides a way to do file based logging, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;QueueHandler&lt;/code&gt; helps to log to a queue object. This queue can be from the &lt;a href=&quot;https://docs.python.org/3/library/queue.html?highlight=simplequeue&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;queue&lt;/code&gt;&lt;/a&gt; module or &lt;a href=&quot;https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Queue&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;multiprocessing.Queue&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;logging&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;logging.handlers&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QueueHandler&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SimpleQueue&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;warning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Test this warning in the console&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SimpleQueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;queue_handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QueueHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;root_logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# remove the StreamHandler instance that is set by default
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root_logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handlers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# add queue handler
# this will stop the log messages from printing in the console
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root_logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;warning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Test this warning in the queue&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This prints:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;WARNING:root:Test this warning in the console
&amp;lt;LogRecord: root, 30, test.py, 14, &quot;Test this warning in the queue&quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note the second printed line is only because of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;print&lt;/code&gt; function. The second &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;logging.warning&lt;/code&gt; function has consumed the message and put it in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;q&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;QueueListener&lt;/code&gt; is used along with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;QueueHandler&lt;/code&gt; to collect messages from the queue and push them to various other targets such as a file, UDP port, etc.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;file_handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;out.log&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;listener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QueueListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;listener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;listener&lt;/code&gt; looks for messages in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;q&lt;/code&gt; and pushes them to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file_handler&lt;/code&gt; which writes to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;out.log&lt;/code&gt;. Let’s use the same flow in a multi process setup.&lt;/p&gt;

&lt;p&gt;Assume a master process that spawns 4 children and all log messages are to be written to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;out.log&lt;/code&gt; file. Any logger message from the children will be written to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;multiprocessing.Queue&lt;/code&gt;. The children need to initialize a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;QueueHandler&lt;/code&gt; and attach it to their root logger as seen above to achieve this. The same queue is listened at the master process’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;QueueListener&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here’s how the master process’s logging is setup:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup_primary_logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;log_queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Handlers for stream/file logging
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;output_file_log_handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FileHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;out.log&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;formatter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Formatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'%(asctime)s - %(levelname)s - %(message)s'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;output_file_log_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setFormatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;formatter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;output_file_log_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setLevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# This listener listens to the `log_queue` and pushes the messages to the list of
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# handlers specified.
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;listener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QueueListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output_file_log_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error_file_log_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;respect_handler_level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;listener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log_queue&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And the worker’s logging setup:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup_worker_logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;queue_handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QueueHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;queue_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setLevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;root_logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;root_logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queue_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Default logger level is WARNING, hence the change. Otherwise, any worker logs
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# are not going to get bubbled up to the parent's logger handlers from where the
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# actual logs are written to the output
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;root_logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setLevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;INFO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log_queue&lt;/code&gt; object has to be sent from the master to all the children. So the master process looks something like this:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;worker_fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;setup_worker_logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;master_fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;log_queue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setup_primary_logging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;worker_fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log_queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_procs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Any messages from the worker will be logged to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;out.log&lt;/code&gt; file with the above setup. A complete working example can be seen in &lt;a href=&quot;https://gist.github.com/scarecrow1123/967a97f553697743ae4ec7af36690da6&quot;&gt;this gist&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="python" /><category term="software" /><summary type="html">Python’s logging module provides a list of super useful handlers to handle/redirect log messages to required target destinations. For instance FileHandler sends the messages to a file, DatagramHandler sends to UDP ports, etc. In a multi process setup however, using FileHandler to redirect logs to the same file from different processes would only corrupt the log file. Explicitly acquiring locks to the same file is a bad thing to do.</summary></entry><entry><title type="html">OMS CS7638 Robotics - AI Techniques - Summer ‘19</title><link href="https://scarecrow1123.github.io/personal-site/gatech-omscs/2019/07/31/rait.html" rel="alternate" type="text/html" title="OMS CS7638 Robotics - AI Techniques - Summer ‘19" /><published>2019-07-31T00:00:00-05:00</published><updated>2019-07-31T00:00:00-05:00</updated><id>https://scarecrow1123.github.io/personal-site/gatech-omscs/2019/07/31/rait</id><content type="html" xml:base="https://scarecrow1123.github.io/personal-site/gatech-omscs/2019/07/31/rait.html">&lt;h3 id=&quot;cs-7638-robotics---ai-techniques&quot;&gt;CS 7638 Robotics - AI Techniques&lt;/h3&gt;
&lt;p&gt;Instructor(s): &lt;a href=&quot;https://www.omscs.gatech.edu/cs-7638-artificial-intelligence-robotics&quot;&gt;Jay Summet&lt;/a&gt; / &lt;a href=&quot;https://en.wikipedia.org/wiki/Sebastian_Thrun&quot;&gt;Sebastian Thrun&lt;/a&gt;
Course Page: &lt;a href=&quot;https://www.omscs.gatech.edu/cs-7638-artificial-intelligence-robotics&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This happened to be my second OMS course following &lt;a href=&quot;https://github.com/scarecrow1123/blog/issues/3&quot;&gt;KBAI&lt;/a&gt;. Previously known as AI for Robotics(AI4R popularly), this isn’t supposed to be originally designed for a summer(short) term. This is typically a 16-week long course which got shrunk to a 11-week one and we were duly cautioned by the professor about this at the beginning of the term.&lt;/p&gt;

&lt;h4 id=&quot;course-videos&quot;&gt;Course Videos&lt;/h4&gt;
&lt;p&gt;The course follows the content from &lt;a href=&quot;https://classroom.udacity.com/courses/cs373&quot;&gt;Sebastian Thrun’s Udacity videos&lt;/a&gt;. The video lectures broadly covers the following:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Localization
    &lt;ul&gt;
      &lt;li&gt;Histogram Filters&lt;/li&gt;
      &lt;li&gt;Kalman Filters&lt;/li&gt;
      &lt;li&gt;Particle Filters&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Search / Path Planning&lt;/li&gt;
  &lt;li&gt;PID Control&lt;/li&gt;
  &lt;li&gt;SLAM (Simultaneous Localization and Planning)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The video content are fairly simple to follow as Prof Thrun makes it sound easy in a lot of places. However, at times, the details were skimmed over and not a lot of background motivation were given for certain parts of the lecture material. Each module is followed by a problem set which comes with solution videos. Solving them and submitting them on canvas fetches 28% of the total grade of the entire class. These were not hard to solve and are not time consuming too.&lt;/p&gt;

&lt;h4 id=&quot;projects&quot;&gt;Projects&lt;/h4&gt;
&lt;p&gt;The projects are the crux of this class as there are no tests/exams in this class. All projects are auto-graded and the solutions had to be adopted from the lecture content. For most of the projects, code from the problem sets served as the boilerplate and were highly helpful to set something up working quickly. The following projects were part of the Summer class:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Asteroids - Kalman Filter&lt;/li&gt;
  &lt;li&gt;Mars Glider - Particle Filter&lt;/li&gt;
  &lt;li&gt;Rocket PID - PID Control&lt;/li&gt;
  &lt;li&gt;Warehouse - Motion Planning and Search&lt;/li&gt;
  &lt;li&gt;Ice Rover - SLAM&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Asteroids and Mars Glider projects were being introduced for the first time as a part of CS7638 and we were the lab rats of some sorts. There was too much FOMO especially during the Mars Glider project weeks, as there were bugs in the testing system and also the test cases were being changed often as this was the first time they introduced the project. We also had to spend a lot of time in tuning parameters to make these systems work well. All of these projects deal with tackling noise in the measurements and motion of robots, obviously one had to get the parameters right to make the systems stable. People spent more time in tuning the params than they did for coding up the whole thing. So those who started late(like me in a couple of projects) suffered from lower scores. Starting early on the projects especially Mars Glider and Warehouse is advisable for anyone who do not want to miss on an A.&lt;/p&gt;

&lt;p&gt;There were also constraints that were introduced in the projects which were not part of the lectures nor the problem sets. Examples being the Q-matrix in Kalman Filters, “fuzzing” in Mars Glider (which automatically made my code work). Typically none of us knew what they were about until the the teaching staff explained the entire thing and helped the class through.&lt;/p&gt;

&lt;h4 id=&quot;class-and-grading&quot;&gt;Class and Grading&lt;/h4&gt;
&lt;p&gt;Prof Summet and the TAs did an excellent job in answering the student questions during the entire period of the class. Since there were a lot of curve balls thrown at us during the projects especially, their insights were very useful in coding up the projects and clarifying the doubts from the problem sets. The Slack group was also highly active with healthy discussions and suggestions.&lt;/p&gt;

&lt;p&gt;Grading is absolute and the project scores are the only ones taken into account for the final grades apart from the problem set grades. Problem sets can be taken for granted as they are there only to check if one has finished watching the lectures.&lt;/p&gt;

&lt;h4 id=&quot;material&quot;&gt;Material&lt;/h4&gt;
&lt;p&gt;I personally did not follow &lt;a href=&quot;https://docs.ufpr.br/~danielsantos/ProbabilisticRobotics.pdf&quot;&gt;Prof Thrun’s Probabilistic Robotics book&lt;/a&gt; which was the suggested text. This particular e-book &lt;a href=&quot;https://github.com/rlabbe/Kalman-and-Bayesian-Filters-in-Python&quot;&gt;Kalman and Bayesian Filters in Python&lt;/a&gt; is an excellent to resource for anyone to understand and get an intuition about these topics with straightforward implementation details.&lt;/p&gt;

&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;Comparing to my previous KBAI class, there are no reports to be written and having code only projects are a huge plus. Optimizing for the auto-grader score games up the work being done and could turn to be fun, but only if you start early on for the projects!&lt;/p&gt;</content><author><name></name></author><category term="gatech-omscs" /><summary type="html">CS 7638 Robotics - AI Techniques Instructor(s): Jay Summet / Sebastian Thrun Course Page: Link</summary></entry><entry><title type="html">Exploring Jsonnet</title><link href="https://scarecrow1123.github.io/personal-site/deep-learning/software/2019/07/06/jsonnet.html" rel="alternate" type="text/html" title="Exploring Jsonnet" /><published>2019-07-06T00:00:00-05:00</published><updated>2019-07-06T00:00:00-05:00</updated><id>https://scarecrow1123.github.io/personal-site/deep-learning/software/2019/07/06/jsonnet</id><content type="html" xml:base="https://scarecrow1123.github.io/personal-site/deep-learning/software/2019/07/06/jsonnet.html">&lt;p&gt;I found &lt;a href=&quot;https://jsonnet.org/&quot;&gt;Jsonnet&lt;/a&gt; through AllenNLP. Hence a few words on that first. We use &lt;a href=&quot;https://github.com/allenai/allennlp&quot;&gt;AllenNLP&lt;/a&gt; for writing our Deep Learning experiments in our team. It is primarily built for doing NLP research on top of PyTorch. However, the abstractions in the library are well designed and easily extensible that it can actually be used for building any fairly straightforward neural network experiments. Perhaps I would write a separate post on how to adopt AllenNLP for non-NLP experiments, but &lt;a href=&quot;https://github.com/allenai/allennlp/issues/2099#issuecomment-450190095&quot;&gt;here is an example&lt;/a&gt; of how it has been used for Computer Vision.&lt;/p&gt;

&lt;h3 id=&quot;jsonnet&quot;&gt;Jsonnet&lt;/h3&gt;

&lt;p&gt;Jsonnet is a DSL for creating data templates and comes in handy to generate JSON based configuration data. It comes with a standard library &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std&lt;/code&gt; that includes features like list comprehension, string manipulation, etc. It is primarily meant for generating configuration files. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std&lt;/code&gt; has a bunch of manifestation utilities that can be used to convert the template to generate targets in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.ini&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.yaml&lt;/code&gt;. For a robust templating language with more complex needs however, I’d suggest to use the awesome &lt;a href=&quot;https://www.stringtemplate.org/&quot;&gt;StringTemplate&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;AllenNLP uses Jsonnet for writing experiment configurations. In other words, the dependencies for running an AllenNLP experiment are specified in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.jsonnet&lt;/code&gt; file and the objects are constructed using built in factories. Below is a section from a configuration that defines a simple feedforward MNIST classifier network:&lt;/p&gt;

&lt;h3 id=&quot;sample-configuration&quot;&gt;Sample Configuration&lt;/h3&gt;

&lt;h5 id=&quot;mnist_feedforwardjsonnet&quot;&gt;mnist_feedforward.jsonnet&lt;/h5&gt;

&lt;div class=&quot;language-jsonnet highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// .....&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;model&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;mnist_encoder&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;num_layers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;activations&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;relu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;relu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;input_dim&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;784&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;hidden_dims&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;512&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;dropout&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.25&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;projection_layer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;num_layers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;activations&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;relu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;input_dim&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;512&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;hidden_dims&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;dropout&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.25&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;final_layer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;num_layers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;activations&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;linear&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;input_dim&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;hidden_dims&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// .....&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;variables&quot;&gt;Variables&lt;/h3&gt;

&lt;p&gt;One minor quibble with the above config: when running multiple experiments, the most obvious thing one would do is to change those numbers in every layer. Say to increase the output dimension of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mnist_encoder&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;input_dim&lt;/code&gt; of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;projection_layer&lt;/code&gt; needs to be adjusted too. For a more complex architecture, there is a good possibility that this would lead to a chain of changes to be done manually.&lt;/p&gt;

&lt;p&gt;Obvious thing to do now is to use variables. In the below example, notice how the same variable is used for configuring both the output and input sizes of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mnist_encoder&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;projection_layer&lt;/code&gt; layers respectively.&lt;/p&gt;

&lt;h5 id=&quot;mnist_feedforwardjsonnet-1&quot;&gt;mnist_feedforward.jsonnet&lt;/h5&gt;

&lt;div class=&quot;language-jsonnet highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;INPUT_SIZE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;784&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;INPUT_ENCODER_OUTPUT_SIZE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;512&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PROJECTION_SIZE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FINAL_OUTPUT_SIZE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DROPOUT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// .....&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;model&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;mnist_encoder&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;num_layers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;activations&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;relu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;relu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;input_dim&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;INPUT_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;hidden_dims&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;INPUT_ENCODER_OUTPUT_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;dropout&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DROPOUT&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;projection_layer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;num_layers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;activations&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;relu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;input_dim&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;INPUT_ENCODER_OUTPUT_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;hidden_dims&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PROJECTION_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;dropout&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.25&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;final_layer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;num_layers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;activations&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;linear&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;input_dim&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PROJECTION_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;hidden_dims&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FINAL_OUTPUT_SIZE&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// .....&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;objects&quot;&gt;Objects&lt;/h3&gt;

&lt;p&gt;The next natural step of the experiment is to try different types of layers. In the above example &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mnist_encoder&lt;/code&gt; is a feedforward block. It could be a convolution based encoder as below:&lt;/p&gt;

&lt;h5 id=&quot;mnist_convjsonnet&quot;&gt;mnist_conv.jsonnet&lt;/h5&gt;

&lt;div class=&quot;language-jsonnet highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ConvSpec&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;num_layers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;input_dim&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;784&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;kernels&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;stride&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;activations&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;relu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;relu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;output_channels&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ....&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;model&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;mnist_encoder&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;conv2d&quot;&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;num_layers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ConvSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num_layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;input_dim&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ConvSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input_dim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;output_channels&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ConvSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;output_channels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;kernels&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ConvSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;kernels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;stride&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ConvSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stride&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;activations&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ConvSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;activations&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ....&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// .....&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConvSpec&lt;/code&gt; is a jsonnet object with a bunch of member attributes that defines how the convolution block is used in the classifier. Jsonnet also supports inheritance of objects as shown &lt;a href=&quot;https://jsonnet.org/learning/tutorial.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;functions&quot;&gt;Functions&lt;/h3&gt;

&lt;p&gt;The subsequent layers such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;projection_layer&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;final_layer&lt;/code&gt; are going to be present in the conv example too and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;projection_layer&lt;/code&gt; needs an input size to be defined. This will be output size of the conv layer and hardcoding this number is going to cause the same set of problems that we saw above in the first example. Let’s define a simple function that computes the output sizes of each layer in a conv block.&lt;/p&gt;

&lt;div class=&quot;language-jsonnet highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;conv_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;kernel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stride&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dilation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dim&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;padding&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dilation&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;kernel&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;-1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stride&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;compute_conv_output_sizes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;conv_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;input_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;curr_idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sizes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=[])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;curr_idx&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;conv_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num_layers&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;sizes&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sizes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;compute_conv_output_sizes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;conv_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;input_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;curr_idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;conv_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;conv_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;kernels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;curr_idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;conv_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stride&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;curr_idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;conv_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;curr_idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;conv_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dilation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;curr_idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])])&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;compute_conv_output_sizes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;conv_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;input_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;curr_idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sizes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;conv_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sizes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sizes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;-1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;conv_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;kernels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;curr_idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;conv_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stride&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;curr_idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;conv_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;curr_idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;conv_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dilation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;curr_idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])]);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compute_conv_output_sizes&lt;/code&gt; is a tail recursive function calculates the output size of each conv layer based on the defined kernel size, stride, padding and dilation.&lt;/p&gt;

&lt;p&gt;Let’s incorporate this definition in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mnist_encoder&lt;/code&gt; example:&lt;/p&gt;

&lt;h5 id=&quot;mnist_convjsonnet-1&quot;&gt;mnist_conv.jsonnet&lt;/h5&gt;

&lt;div class=&quot;language-jsonnet highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ConvSpec&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;num_layers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;input_dim&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;784&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;kernels&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;stride&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;activations&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;relu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;relu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;output_channels&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;output_sizes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;compute_conv_output_sizes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input_dim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;output_size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;output_sizes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;-1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ....&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;model&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;mnist_encoder&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;conv2d&quot;&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;num_layers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ConvSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num_layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;input_dim&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ConvSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input_dim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;output_channels&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ConvSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;output_channels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;kernels&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ConvSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;kernels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;stride&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ConvSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stride&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;activations&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ConvSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;activations&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ....&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// .....&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now a layer that follows &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mnist_encoder&lt;/code&gt; can make use of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConvSpec.output_size&lt;/code&gt; to configure its input sizes.&lt;/p&gt;

&lt;h3 id=&quot;imports&quot;&gt;Imports&lt;/h3&gt;

&lt;p&gt;So we have defined two variants of encoders here for a classifier. Except for the encoder all the other parts of the model configuration and training configuration are going to be the same. Let’s put the base scaffolding that defines the classifier in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.libsonnet&lt;/code&gt; file. This will serve as an importable lib that two different experiments can use.&lt;/p&gt;

&lt;h5 id=&quot;lib-mnistlibsonnet&quot;&gt;lib-mnist.libsonnet&lt;/h5&gt;
&lt;div class=&quot;language-jsonnet highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;MNIST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;encoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;projection_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;final_output_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dropout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;num_projection_layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// .....&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;model&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;mnist_encoder&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;encoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;projection_layer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;num_layers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;num_projection_layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;activations&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;relu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;input_dim&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;objectHas&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;encoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;encoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;output_size&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;encoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hidden_dims&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;hidden_dims&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;projection_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;dropout&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dropout&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;final_layer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;num_layers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;activations&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;linear&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;input_dim&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;projection_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;hidden_dims&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;final_output_size&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// .....&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Notice above how the MNIST classifier has been parameterized which can be used from different variants of the architecture. Now, let’s redefine the feedforward variant to do the import.&lt;/p&gt;

&lt;h5 id=&quot;mnist_feedforwardjsonnet-2&quot;&gt;mnist_feedforward.jsonnet&lt;/h5&gt;
&lt;div class=&quot;language-jsonnet highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lib&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;lib-mnist.libsonnet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;INPUT_SIZE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;784&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;INPUT_ENCODER_OUTPUT_SIZE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;512&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PROJECTION_SIZE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FINAL_OUTPUT_SIZE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DROPOUT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NUM_PROJECTION_LAYERS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ENCODER&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;s&quot;&gt;&quot;spec&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;num_layers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;activations&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;relu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;relu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;input_dim&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;INPUT_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;hidden_dims&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;INPUT_ENCODER_OUTPUT_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;dropout&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DROPOUT&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MNIST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ENCODER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PROJECTION_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FINAL_OUTPUT_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DROPOUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NUM_PROJECTION_LAYERS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;mnist_convjsonnet-2&quot;&gt;mnist_conv.jsonnet&lt;/h5&gt;

&lt;div class=&quot;language-jsonnet highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lib&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;lib-mnist.libsonnet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;INPUT_SIZE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;784&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PROJECTION_SIZE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FINAL_OUTPUT_SIZE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DROPOUT&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NUM_PROJECTION_LAYERS&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ConvSpec&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;num_layers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;input_dim&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;INPUT_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;kernels&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;stride&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;activations&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;relu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;relu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;output_channels&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;output_sizes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;compute_conv_output_sizes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input_dim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;output_size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;output_sizes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;-1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ConvEncoder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;spec&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;conv2d&quot;&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;num_layers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ConvSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num_layers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;input_dim&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ConvSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input_dim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;output_channels&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ConvSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;output_channels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;kernels&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ConvSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;kernels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;stride&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ConvSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stride&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;activations&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ConvSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;activations&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MNIST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ConvEncoder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PROJECTION_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FINAL_OUTPUT_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DROPOUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NUM_PROJECTION_LAYERS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now this kind of a setup would allow to easily bring in rapid prototyping and experimentation. Just replace the encoder with RNN or Self Attention based layers and pass it to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lib.MNIST&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Jsonnet brings in a lot of flexibility to defining configurations as we have seen above. There are a lot more interesting things that could be done with respect to configuring neural net experiments with Jsonnet. Imagine writing a grid search procedure in Jsonnet that would generate all possible configurations for the different hyperparameter combinations. That wouldn’t be too difficult I guess. A lot of interesting example experiment configurations can be found in &lt;a href=&quot;https://github.com/allenai/allennlp/tree/master/training_config&quot;&gt;AllenNLP’s source here&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="deep-learning" /><category term="software" /><summary type="html">I found Jsonnet through AllenNLP. Hence a few words on that first. We use AllenNLP for writing our Deep Learning experiments in our team. It is primarily built for doing NLP research on top of PyTorch. However, the abstractions in the library are well designed and easily extensible that it can actually be used for building any fairly straightforward neural network experiments. Perhaps I would write a separate post on how to adopt AllenNLP for non-NLP experiments, but here is an example of how it has been used for Computer Vision.</summary></entry><entry><title type="html">OMS CS7637 - Knowledge-Based AI (KBAI) - Spring ‘19</title><link href="https://scarecrow1123.github.io/personal-site/gatech-omscs/2019/05/05/kbai.html" rel="alternate" type="text/html" title="OMS CS7637 - Knowledge-Based AI (KBAI) - Spring ‘19" /><published>2019-05-05T00:00:00-05:00</published><updated>2019-05-05T00:00:00-05:00</updated><id>https://scarecrow1123.github.io/personal-site/gatech-omscs/2019/05/05/kbai</id><content type="html" xml:base="https://scarecrow1123.github.io/personal-site/gatech-omscs/2019/05/05/kbai.html">&lt;h3 id=&quot;cs7637-knowledge-based-ai---cognitive-systems-kbai---spring-19&quot;&gt;CS7637 Knowledge-Based AI - Cognitive Systems (KBAI) - Spring ‘19&lt;/h3&gt;
&lt;p&gt;Instructor: &lt;a href=&quot;https://twitter.com/DrDavidJoyner&quot;&gt;Prof David Joyner&lt;/a&gt;
Course Page: &lt;a href=&quot;http://lucylabs.gatech.edu/kbai/&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I &lt;a href=&quot;https://github.com/scarecrow1123/blog/issues/2&quot;&gt;applied for OMSCS in 2018 and joined the Spring ‘19 batch&lt;/a&gt;. I intend to do Machine Learning(ML) Specialization. KBAI is in no way related to anything that is machine learning and it does not fall under the core/elective courses that is required for the specialization. To satisfy the &lt;a href=&quot;http://www.omscs.gatech.edu/specialization-machine-learning&quot;&gt;specialization requirements&lt;/a&gt;, I will be taking the following seven courses that are available throughout this program:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CS 6515 GA&lt;/li&gt;
  &lt;li&gt;CS7641 ML&lt;/li&gt;
  &lt;li&gt;CS6476 CV&lt;/li&gt;
  &lt;li&gt;CS7642 RL&lt;/li&gt;
  &lt;li&gt;CS7646 ML4T&lt;/li&gt;
  &lt;li&gt;CSE6242 DVA&lt;/li&gt;
  &lt;li&gt;CSE6250 BD4H&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apart from the above courses few other courses that may be relevant for someone who is interested in ML/AI could be CS6601 Artifical Intelligence, CS7638 AI for Robotics. KBAI can be considered as a distant precursor to a typical AI course, but definitely not a prerequisite if one is planning to take any of the above courses.&lt;/p&gt;

&lt;h4 id=&quot;about-kbai&quot;&gt;About KBAI&lt;/h4&gt;
&lt;p&gt;KBAI is a gentle introduction to concepts and problems that are involved when designing an AI algorithm. The syllabus surveys a wide variety of traditional AI paradigms and concepts that closely follows the &lt;a href=&quot;https://courses.csail.mit.edu/6.034f/ai3/rest.pdf&quot;&gt;Patrick Winston “Artificial Intelligence” book&lt;/a&gt;. The course content also includes some of the work done personally by the instructors Ashok Goel, David Joyner and people from their lab.&lt;/p&gt;

&lt;h4 id=&quot;course-work&quot;&gt;Course work&lt;/h4&gt;
&lt;p&gt;The goal of this class is to develop an AI agent to solve a variant of an IQ test called &lt;a href=&quot;https://en.wikipedia.org/wiki/Raven%27s_Progressive_Matrices&quot;&gt;Raven’s Progressive Matrices&lt;/a&gt; (RPM). The class is divided into three 5-week periods. Each of these include submitting a 10-page assignment, project work and an exam. The project work includes writing code to solve a given set of RPM problems and writing a detailed report. So at the end of the course everyone would have submitted 3 sets of assignments, projects and exams.&lt;/p&gt;

&lt;h4 id=&quot;rpm-project&quot;&gt;RPM Project&lt;/h4&gt;
&lt;p&gt;There are 4 sets of RPM problems given with increasing difficulty(see attached image for a sample problem). These problems could be solved in two different ways. For the first two projects, we would be given a verbal description of these patterns which can be used as input to solve the problem. However for the final project, only images can be directly used as inputs. Hence it would make sense to start the first project itself by using image inputs rather than starting with verbal and changing the agent implementation at a later stage to use visual inputs. These two papers&lt;a href=&quot;http://dilab.gatech.edu/publications/Kunda%20McGreggor%20Goel%202011%20AAAI.pdf&quot;&gt;[1]&lt;/a&gt;, &lt;a href=&quot;http://www.davidjoyner.net/blog/wp-content/uploads/2015/05/JoynerBedwellGrahamLemmonMartinezGoel-ICCC2015-Distribution.pdf&quot;&gt;[2]&lt;/a&gt; helped a lot to implement the solution successfully. 
&lt;img src=&quot;https://user-images.githubusercontent.com/3162105/57194045-85dde980-6f5f-11e9-92b2-5e4e5698ae8b.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Getting started early on the projects is also helpful. The grading rubric for the project includes how spaced out the submissions are for a project.&lt;/p&gt;

&lt;h4 id=&quot;about-the-class&quot;&gt;About the class&lt;/h4&gt;
&lt;p&gt;The class was very well organized. I should say that Prof Joyner’s way of organizing a class should be a blueprint for designing and conducting classes online. The TAs were also helpful throughout in Piazza and the forums were literally buzzing throughout(perhaps because posting something would fetch a student some participation grades too ;)). But overall the class was very engaging and set the tone for me on how OMS is going to be. The class also used &lt;a href=&quot;https://peerfeedback.gatech.edu/&quot;&gt;Peerfeedback&lt;/a&gt; to receive and give peer feedback about project and assignment submissions. Even though the feedbacks I received were mostly generic and sometimes rhetorical, getting to read others’ submissions was definitely helpful in a lot of ways to me personally.&lt;/p&gt;

&lt;p&gt;One quibble I had with the content was that the things I(or most of the class) implemented for the projects were for a large part looked disconnected from the lecture content. Even though on hindsight a bunch of things from an implementation could be mapped to a few concepts in the lectures, there was nothing that enforced on using them. Also, the lecture content looked repetitive and hand-wavy a bit at times. There are not many computational techniques/models that one could learn from this class.&lt;/p&gt;

&lt;p&gt;There are also a couple of optional participation projects completing which would fetch some participation points. Both of them had an NLP problem to solve. These projects are testers for what may be given as full time projects in one of the later versions of KBAI. Another interesting fact about KBAI is from one of the discussions that happened in the forums. It looks like in the Fall version of KBAI, the TAs wouldn’t know if a submission is from the online class or the onsite class that happens at GT. And I heard that there is no much performance difference between the two classes.&lt;/p&gt;

&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;I opted this class because this was my first semester into the program. A lot of reviews in &lt;a href=&quot;https://omscentral.com/courses/CS-7637&quot;&gt;OMSCentral&lt;/a&gt; also suggested this class for someone who is starting with OMS. I also intended to get an introduction to the traditional AI topics and this class did satisfy a part of my expectations. However, if you are expecting to learn computational techniques, this class is weak on that front. This is an easy class for a graduate level program and one can expect to work around 10-15 hours a week during submission times.&lt;/p&gt;</content><author><name></name></author><category term="gatech-omscs" /><summary type="html">CS7637 Knowledge-Based AI - Cognitive Systems (KBAI) - Spring ‘19 Instructor: Prof David Joyner Course Page: Link</summary></entry><entry><title type="html">About Georgia Tech OMSCS</title><link href="https://scarecrow1123.github.io/personal-site/gatech-omscs/2019/05/04/about-gatech.html" rel="alternate" type="text/html" title="About Georgia Tech OMSCS" /><published>2019-05-04T00:00:00-05:00</published><updated>2019-05-04T00:00:00-05:00</updated><id>https://scarecrow1123.github.io/personal-site/gatech-omscs/2019/05/04/about-gatech</id><content type="html" xml:base="https://scarecrow1123.github.io/personal-site/gatech-omscs/2019/05/04/about-gatech.html">&lt;h3 id=&quot;online-master-of-science-computer-science-omscs&quot;&gt;Online Master of Science Computer Science (OMSCS)&lt;/h3&gt;
&lt;p&gt;Georgia Tech(GT) introduced their &lt;a href=&quot;http://www.omscs.gatech.edu/&quot;&gt;Online Master’s program&lt;/a&gt; way back in 2014 IIRC. I remember reading one of the early Hacker News(HN) threads about the program when it was introduced. MOOCs were at rise during that period of time. But doing an entire Master’s program online was definitely new to me then and realized how cool the offering is when I discussed about it with my &lt;a href=&quot;https://github.com/kaveman-&quot;&gt;uncle&lt;/a&gt; who actually sent me the HN thread. On hindsight, now I understand how far ahead GT was in offering this course. For a perspective, lots of other universities such as Arizona, UIUC, etc. have started similar courses only very recently, while few thousands have already graduated from OMSCS in the last few years.&lt;/p&gt;

&lt;h4 id=&quot;back-to-2018&quot;&gt;Back to 2018&lt;/h4&gt;
&lt;p&gt;I decided to enrol myself into the program after realizing the importance of going through a high standard curriculum of a Master’s program. I was trying to learn the basics of Deep Learning myself from a bunch of great graduate level resources. My routine was to mostly watch lectures, read related material, take notes and apply them at work. Even though this exposed me to a lot of graduate level content, I still wasn’t committed much to the material because I wasn’t going through a formal curriculum that would include assignments, grades and stuff.&lt;/p&gt;

&lt;h4 id=&quot;choosing-omscs&quot;&gt;Choosing OMSCS&lt;/h4&gt;
&lt;p&gt;I started looking into the online graduate level programs. The primary factors that I looked into these programs were:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Credibility&lt;/li&gt;
  &lt;li&gt;Quality of course content&lt;/li&gt;
  &lt;li&gt;Affordability&lt;/li&gt;
  &lt;li&gt;Community&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;credibility--course-content&quot;&gt;Credibility &amp;amp; Course content&lt;/h5&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cc.gatech.edu/news/620099/omscs-revolution-will-be-digitized&quot;&gt;GT has been a pioneer with more than 2000 alumni&lt;/a&gt; from OMS and I’ve heard good things about the program through my friends who are already enrolled to the program. So I had no second thoughts on the credibility of this program. People have even got into some top PhD programs after OMSCS.&lt;/p&gt;

&lt;p&gt;The course &lt;a href=&quot;https://www.omscs.gatech.edu/current-courses&quot;&gt;listing&lt;/a&gt; is actually not bad. I agree that there may not be courses like Deep Learning which I was primarily interested on. However there’s a lot to learn from the current offering. The Machine Learning related courses do look solid. All of the courses are produced exclusively for the online program and many courses are siblings of the onsite offering but just optimized for an online experience.&lt;/p&gt;

&lt;h5 id=&quot;affordability&quot;&gt;Affordability&lt;/h5&gt;
&lt;p&gt;OMSCS scores big when it comes to affordability. The tuition fee for a &lt;a href=&quot;http://www.omscs.gatech.edu/program-info/cost-payment-schedule&quot;&gt;single 3 credit course is ~ $500 and term fee is ~ $300&lt;/a&gt;. In comparison, the &lt;a href=&quot;https://cs.illinois.edu/academics/graduate/professional-mcs-program/online-master-computer-science#TuitionFees&quot;&gt;UIUC program may cost&lt;/a&gt; up to 3 times that of OMSCS.&lt;/p&gt;

&lt;h5 id=&quot;community&quot;&gt;Community&lt;/h5&gt;
&lt;p&gt;Doing a remote degree does have rough edges early on as a fresher into the program. Things can go wrong any time with respect to the classroom experience as well as administrative stuff such as registration, payment, etc. Troubleshooting is not easy even with the help of thorough documentation. OMSCS has got multiple friendly online communities at &lt;a href=&quot;https://www.reddit.com/r/omscs&quot;&gt;Reddit&lt;/a&gt;, &lt;a href=&quot;https://omscs-study.slack.com/&quot;&gt;Slack&lt;/a&gt;, &lt;a href=&quot;https://www.facebook.com/groups/gtomscsstudents/&quot;&gt;Facebook&lt;/a&gt;, &lt;a href=&quot;https://mewe.com/group/5c169ac7d36a980d0061c6f8&quot;&gt;MeWe&lt;/a&gt;. The now defunct G+ community was the best of all though. These are all well moderated student run communities and people are extremely friendly and help you throughout. There is also &lt;a href=&quot;https://omscentral.com/&quot;&gt;OMSCentral&lt;/a&gt; volunteer project where students write their reviews and comments about the courses they’ve taken. This is super helpful in getting to validating and choosing courses that may suit you personally.&lt;/p&gt;

&lt;h4 id=&quot;applying&quot;&gt;Applying&lt;/h4&gt;
&lt;p&gt;I applied in August 2018 for Spring ‘19 enrollment. The process involved submitting a TOEFL score along with a SoP, resume, background essay and 3 LoRs. OMSCS has a rolling admission process. It means that one can submit an application round the year. But there are cutoff dates for respective semesters. One can get enrolled into either Spring/Fall of a year. The &lt;a href=&quot;https://registrar.gatech.edu/calendar&quot;&gt;academic calendar&lt;/a&gt; of OMSCS is the same as that of the onsite courses. I received the institute decision by October first week. I’ve heard the acceptance rate is pretty high at more than 60%, but I’m not sure. The reddit community actively maintains an &lt;a href=&quot;https://www.reddit.com/r/OMSCS/comments/ahr3kw/fall_2019_admissions_thread/&quot;&gt;admission thread&lt;/a&gt; which may shed more information on why one may get rejected if that is the case.&lt;/p&gt;

&lt;h4 id=&quot;getting-into-the-program&quot;&gt;Getting into the program&lt;/h4&gt;
&lt;p&gt;Students will receive a detailed orientation document before the course registration starts. Things may get very anxious before the start of the registration. The G+ community was very helpful in clearing the doubts early and this set of &lt;a href=&quot;https://www.youtube.com/playlist?list=PLAwxTw4SYaPmVSQFhl4waWA7YWA-WKQuT&quot;&gt;Orientation videos&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/DrDavidJoyner&quot;&gt;Prof Joyner&lt;/a&gt; turned out to be very helpful to get to know about how the courses would be run.&lt;/p&gt;

&lt;h4 id=&quot;program-info&quot;&gt;Program info&lt;/h4&gt;
&lt;p&gt;OMSCS requires one to complete 10 three credit courses to receive a degree. The actual degree offered does not differ from the one that is given for an onsite MS program. However, the transcripts would mention the campus as Online if that would matter. The schedule is a standard one following a three semester per year schedule which is the same as the onsite one. One can take upto 2 courses in Spring &amp;amp; Fall and 1 in Summer. If one wishes to take an extra course, they need to get permission from the advising team. OMSCS also offers different &lt;a href=&quot;http://www.omscs.gatech.edu/program-info/specializations&quot;&gt;specializations&lt;/a&gt; which may help to channelize one’s choice of courses throughout the program. Every specialization has core and elective courses requirement that needs to be satisfied.&lt;/p&gt;

&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;I’m enjoying OMSCS so far and would definitely recommend to anyone who may be interested. I just finished my first semester(Spring ‘19) with CS7637 and will be writing about it in another post soon. 
People have written a lot about this program online and also given finer details about the courses. They have all been helpful for me in getting to know about this program. I intend to do the same thing by logging my OMS experience.&lt;/p&gt;</content><author><name></name></author><category term="gatech-omscs" /><summary type="html">Online Master of Science Computer Science (OMSCS) Georgia Tech(GT) introduced their Online Master’s program way back in 2014 IIRC. I remember reading one of the early Hacker News(HN) threads about the program when it was introduced. MOOCs were at rise during that period of time. But doing an entire Master’s program online was definitely new to me then and realized how cool the offering is when I discussed about it with my uncle who actually sent me the HN thread. On hindsight, now I understand how far ahead GT was in offering this course. For a perspective, lots of other universities such as Arizona, UIUC, etc. have started similar courses only very recently, while few thousands have already graduated from OMSCS in the last few years.</summary></entry><entry><title type="html">Python Control Flow: EAFP Vs LBYL</title><link href="https://scarecrow1123.github.io/personal-site/python/2019/04/22/python.html" rel="alternate" type="text/html" title="Python Control Flow: EAFP Vs LBYL" /><published>2019-04-22T00:00:00-05:00</published><updated>2019-04-22T00:00:00-05:00</updated><id>https://scarecrow1123.github.io/personal-site/python/2019/04/22/python</id><content type="html" xml:base="https://scarecrow1123.github.io/personal-site/python/2019/04/22/python.html">&lt;p&gt;EAFP - Easier to Ask for Forgiveness than Permission
LBYL - Look Before You Leap&lt;/p&gt;

&lt;p&gt;These are two different ways to do control flow. LBYL style pertains to writing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if/else&lt;/code&gt; blocks to make decisions. According to [1], in this not so standard Pythonic way of doing control flow, exceptional cases get the emphasis by the way the conditions are expressed. A common example as below:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if &quot;key&quot; in dict_:
  value += dict_[&quot;key&quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As [1] suggests, in simpler words, the above piece of code conveys the special case in an emphasized way rather than showing us what is normal. Using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try/except&lt;/code&gt; blocks(EAFP), we write what is normal and handle exceptions that may rise out of it. This becomes easier to convey the more natural cases as follows:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;try:
    value += dict_[&quot;key&quot;]
except KeyError:
    pass
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;[2] adds another important case where EAFP helps to avoid race conditions. In a multi-threaded environment, in the above &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if/else&lt;/code&gt; block, assume a thread has passed the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; condition. Before the next statement gets executed in the current thread, another thread may inadvertently remove the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key&lt;/code&gt; from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dict_&lt;/code&gt; which would cause an exception in the original thread. However, in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try/except&lt;/code&gt; case, this cannot happen. Another way to solve this problem is to use standard locking mechanisms.&lt;/p&gt;

&lt;p&gt;[1] - &lt;a href=&quot;https://devblogs.microsoft.com/python/idiomatic-python-eafp-versus-lbyl/&quot;&gt;Idiomatic Python: EAFP versus LBYL&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[2] - &lt;a href=&quot;https://learning.oreilly.com/library/view/fluent-python/9781491946237/ch15.html&quot;&gt;Chapter 15. Context Managers and else Blocks, Fluent Python, Luciano Ramalho&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="python" /><summary type="html">EAFP - Easier to Ask for Forgiveness than Permission LBYL - Look Before You Leap</summary></entry></feed>